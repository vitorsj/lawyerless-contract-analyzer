version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: lawyerless-backend
    ports:
      - "8000:8000"
    volumes:
      # Mount source code for hot reload in development
      - ./backend:/app
      # Mount temp directory for file processing
      - ./tmp:/tmp
    environment:
      # Application settings
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=debug
      
      # API Configuration
      - HOST=0.0.0.0
      - PORT=8000
      - CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
      
      # File Processing
      - UPLOAD_MAX_SIZE=52428800  # 50MB
      - TEMP_DIR=/tmp
      - ALLOWED_EXTENSIONS=pdf
      
      # LLM Configuration (set these in .env.local)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - LLM_PROVIDER=${LLM_PROVIDER:-openai}
      - LLM_MODEL=${LLM_MODEL:-gpt-4}
      
      # Brazilian Legal Settings
      - DEFAULT_LANGUAGE=pt-BR
      - LEGAL_JURISDICTION=Brazil
      - TIMEZONE=America/Sao_Paulo
      
      # Performance
      - WORKERS=1  # Single worker for development
      - MAX_CONCURRENT_ANALYSES=3
      - ANALYSIS_TIMEOUT=600  # 10 minutes
    depends_on:
      - redis
    networks:
      - lawyerless-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Next.js Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: lawyerless-frontend
    ports:
      - "3000:3000"
    volumes:
      # Mount source code for hot reload
      - ./frontend:/app
      - /app/node_modules  # Avoid mounting node_modules
      - /app/.next         # Avoid mounting .next build cache
    environment:
      # Next.js Configuration
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
      - WATCHPACK_POLLING=true  # Enable polling for file changes in Docker
      
      # API Configuration
      - NEXT_PUBLIC_BACKEND_URL=http://localhost:8000
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
      - NEXT_PUBLIC_APP_VERSION=1.0.0-dev
      
      # Feature Flags
      - NEXT_PUBLIC_ENABLE_DEBUG=true
      - NEXT_PUBLIC_ENABLE_MOCK_DATA=false
    depends_on:
      - backend
    networks:
      - lawyerless-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for WebSocket sessions and caching
  redis:
    image: redis:7-alpine
    container_name: lawyerless-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - lawyerless-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # PostgreSQL Database (optional, for future features)
  database:
    image: postgres:15-alpine
    container_name: lawyerless-database
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_DB=lawyerless
      - POSTGRES_USER=lawyerless
      - POSTGRES_PASSWORD=lawyerless_dev
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=pt_BR.UTF-8
    networks:
      - lawyerless-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lawyerless -d lawyerless"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx Reverse Proxy (optional, for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: lawyerless-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - lawyerless-network
    restart: unless-stopped
    profiles:
      - production  # Only start with --profile production

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: lawyerless-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - lawyerless-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: lawyerless-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    networks:
      - lawyerless-network
    restart: unless-stopped
    profiles:
      - monitoring

# Network configuration
networks:
  lawyerless-network:
    name: lawyerless-network
    driver: bridge

# Volume configuration
volumes:
  redis_data:
    name: lawyerless-redis-data
  postgres_data:
    name: lawyerless-postgres-data
  prometheus_data:
    name: lawyerless-prometheus-data
  grafana_data:
    name: lawyerless-grafana-data